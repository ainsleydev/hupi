// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Hugo is an autogenerated mock type for the Hugo type
type Hugo struct {
	mock.Mock
}

// Build provides a mock function with given fields: args
func (_m *Hugo) Build(args []string) error {
	ret := _m.Called(args)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Rebuild provides a mock function with given fields:
func (_m *Hugo) Rebuild() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Server provides a mock function with given fields: args
func (_m *Hugo) Server(args []string) error {
	ret := _m.Called(args)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewHugo interface {
	mock.TestingT
	Cleanup(func())
}

// NewHugo creates a new instance of Hugo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHugo(t mockConstructorTestingTNewHugo) *Hugo {
	mock := &Hugo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
